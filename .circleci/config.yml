version: 2.1

orbs:
  # Send notifications for failed builds on master, develop branches using Slack orb (https://circleci.com/orbs/registry/orb/circleci/slack). Refer to the
  # For channels to notify and webhook URL refer to the CircleCI Slack App page (https://slack.com/apps/A0F7VRE7N-circleci).
  slack: circleci/slack@3.4.2

job_defaults: &job_defaults
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    parallelism: 1
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      - CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      - GSDK_VERSION: 360.0.0
      - GSDK_CHECKSUM: 6192cb2791f592da6d372888dbd7ee81d3d91f255d844ab5fc518fc97e453648
      - CIRCLECI_CLI_VERSION: "0.1.15973"
      - CIRCLECI_CLI_CHECKSUM: "4187a5245f06dd8e1d51d5a99ad40ed9e8963397cecf006fd2d6a04ac374bef6"

commands:
  # Define reusable sets of steps to be run within the testing jobs.
  build:
    steps:
      # this will check out the curation code into the working directory.  in our case, it is defined
      # by job_defaults above
      - checkout
      # this filters all defined envvars for those prefixed with CI, GCLOUD, GOOGLE, GAE, or SLACK, then populates the
      # runtime's $BASH_ENV file with each of them prefixed with "export ".  This file is ultimately mounted into the
      # container as /ci.env and sourced during execution.
      - run:
          name: "Populate bash env file"
          command: |
            printenv | egrep "^CI|^GCLOUD|^GOOGLE|^GAE|^SLACK" | sed -e 's/^.*/export &/g' | tee "${BASH_ENV}"
      # this builds the actual container used to execute tests.  the layers from this build are stored using
      # the `docker_layer_caching` system provided by CircleCI.  It is just a volume mount.
      - run:
          name: "Build container"
          environment:
            - DOCKER_BUILDKIT: 1
            - COMPOSE_DOCKER_CLI_BUILD: 1
          command: |
            docker-compose build \
              --build-arg UID=$(id -u) \
              --build-arg GID=$(id -g) \
              --progress plain \
              develop
  printenv:
    steps:
      - run:
          name: "Print in-container environment variables"
          command: ./curation.sh printenv
  test_teardown:
    steps:
      # Save test results
      - store_test_results:
          path: ./tests/results/junit
      # Save artifacts
      - store_artifacts:
          path: ./tests/results/coverage
          destination: test_results
      - slack/status:
          fail_only: true
          only_for_branches: master,develop
  lint_teardown:
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: master,develop

jobs:
  linting_checks:
    <<: *job_defaults
    steps:
      - build
      - printenv
      - run:
          name: Run lint checks
          command: ./curation.sh run-tests lint
      - lint_teardown

  unit_test:
    <<: *job_defaults
    steps:
      - build
      - printenv
      - run:
          name: Run unit tests
          command: ./curation.sh run-tests unit
      - test_teardown

  integration_test:
    <<: *job_defaults
    steps:
      - build
      - printenv
      - run:
          name: Run integration tests
          command: ./curation.sh run-tests integration
          no_output_timeout: 3000s
      - test_teardown

  delete_stale_test_datasets:
    <<: *job_defaults
    steps:
      - build
      - printenv
      - run:
          name: Delete stale test datasets
          command: ./curation.sh delete-stale-test-datasets

workflows:
  version: 2
  test:
    jobs:
      # - linting_checks
      # - unit_test
      # - integration_test:
      #     filters:
      #       branches:
      #         # This would cause too much noise to run on commit, run nightly
      #         # instead per below workflow.
      #         ignore: develop
      - delete_stale_test_datasets

  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *" # midnight CST
          filters:
            branches:
              only: develop
    jobs:
      - integration_test
      - delete_stale_test_datasets