version: 2.1

orbs:
  # Send notifications for failed builds on master, develop branches using Slack orb (https://circleci.com/orbs/registry/orb/circleci/slack). Refer to the
  # For channels to notify and webhook URL refer to the CircleCI Slack App page (https://slack.com/apps/A0F7VRE7N-circleci).
  slack: circleci/slack@3.4.2

job_defaults: &job_defaults
    machine:
      image: ubuntu-2004:202107-02
      docker_layer_caching: true
    parallelism: 1
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      - CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      - GSDK_VERSION: 355.0.0
      - GSDK_CHECKSUM: ab5f228e6b7b4736fcf3f2b59ce5426244367643580ef73fd5abe90708ba51f6

commands:
  # Define reusable sets of steps to be run within the testing jobs.
  build:
    steps:
      # this will check out the curation code into the working directory.  in our case, it is defined
      # by job_defaults above
      - checkout
      - run:
          name: "Build tests container"
          environment:
            - DOCKER_BUILDKIT: 1
            - COMPOSE_DOCKER_CLI_BUILD: 1
          command: |
            docker-compose build \
              --build-arg UID=$(id -u) \
              --build-arg GID=$(id -g) \
              --progress plain \
              base tests
  test_teardown:
    steps:
      # Save test results
      - store_test_results:
          path: ./tests/results/junit
      # Save artifacts
      - store_artifacts:
          path: ./tests/results/coverage
          destination: test_results
      - slack/status:
          fail_only: true
          only_for_branches: master,develop
  lint_teardown:
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: master,develop

jobs:
  linting_checks:
    <<: *job_defaults
    steps:
      - build
      - run:
          name: Run lint checks
          command: ./run.sh tests lint
      - lint_teardown

  unit_test:
    <<: *job_defaults
    steps:
      - build
      - run:
          name: Run unit tests
          command:  |
            ./run.sh \
              -e GCLOUD_CREDENTIALS_KEY="${GCLOUD_CREDENTIALS_KEY}" \
              -e GCLOUD_CREDENTIALS="${GCLOUD_CREDENTIALS}" \
              -e CI="${CI}" \
              -e CIRCLECI="${CIRCLECI}" \
              tests \
              unit
      - test_teardown

  integration_test:
    <<: *job_defaults
    steps:
      - build
      # Setup GCP access and create cloud resources as needed.
      - run:
          name: Run integration tests
          command: |
            ./run.sh \
              -e GCLOUD_CREDENTIALS_KEY="${GCLOUD_CREDENTIALS_KEY}" \
              -e GCLOUD_CREDENTIALS="${GCLOUD_CREDENTIALS}" \
              -e CI="${CI}" \
              -e CIRCLECI="${CIRCLECI}" \
              tests \
              integration
          no_output_timeout: 3000s
      - test_teardown

workflows:
  version: 2
  test:
    jobs:
      - linting_checks
      - unit_test
      - integration_test:
          filters:
            branches:
              # This would cause too much noise to run on commit, run nightly
              # instead per below workflow.
              ignore: develop

  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *" # midnight CST
          filters:
            branches:
              only: develop
    jobs:
      - integration_test
