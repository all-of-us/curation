version: 2.1

orbs:
  # Send notifications for failed builds on master, develop branches using Slack orb (https://circleci.com/orbs/registry/orb/circleci/slack). Refer to the
  # For channels to notify and webhook URL refer to the CircleCI Slack App page (https://slack.com/apps/A0F7VRE7N-circleci).
  slack: circleci/slack@3.4.2

job_defaults: &job_defaults
    working_directory: /home/circleci/project/curation
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      - CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      - GSDK_VERSION: 355.0.0
      - GSDK_CHECKSUM: ab5f228e6b7b4736fcf3f2b59ce5426244367643580ef73fd5abe90708ba51f6
    docker:
      - image: cimg/base:stable-18.04

commands:
  # Define reusable sets of steps to be run within the testing jobs.
  project_setup:
    steps:
      # this will check out the curation code into the working directory.  in our case, it is defined
      # by job_defaults above
      - checkout
      # this performs some updates
      - run:
          name: Initialize OS Image
          command: ./ci/scripts/common_00_init_image.sh
      # attempts to restore a previous pyenv directory if one exists.
      # subsequent steps will refresh this cache if need be
      - restore_cache:
          name: Restore pyenv directory
          keys:
            - pip-cache-v2-{{ checksum "data_steward/requirements.txt" }}-{{ checksum "data_steward/dev_requirements.txt" }}-{{ checksum "data_steward/deid/requirements.txt" }}
            # if cache for exact version of `project.clj` is not present then load any most recent one
            - pip-cache-v2-
      # this will ensure the pyenv is accurate as of this run
      - run:
          name: Initialize Python venv
          command: ./ci/scripts/common_10_init_venv.sh
      # this will ensure that our pyenv cache is up to date as of this run
      - save_cache:
          name: Save pyenv dir
          key: pip-cache-v2-{{ checksum "data_steward/requirements.txt" }}-{{ checksum "data_steward/dev_requirements.txt" }}-{{ checksum "data_steward/deid/requirements.txt" }}
          paths:
            - ./curation_venv
      - run:
          name: Initialize Environment Variables
          command: ./ci/scripts/common_20_init_env.sh
  test_setup:
    steps:
      - run:
          name: Test setup
          command: ./ci/scripts/tests_00_setup.sh
      - run:
          name: Install Google SDK
          command: ./ci/scripts/tests_10_install_gsdk.sh
      - run:
          name: Activate gcloud auth
          command: ./data_steward/ci/activate_creds.sh ${HOME}/gcloud-credentials-key.json
  test_teardown:
    steps:
      - run:
          name: Test teardown
          command: ./ci/scripts/tests_50_combine_coverage.sh
          no_output_timeout: 30s
      # Save test results
      - store_test_results:
          path: ./tests/results/junit
      # Save artifacts
      - store_artifacts:
          path: ./tests/results/coverage
          destination: test_results
      - slack/status:
          fail_only: true
          only_for_branches: master,develop
  lint_teardown:
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: master,develop

jobs:
  linting_checks:
    <<: *job_defaults
    steps:
      - project_setup
      - run:
          name: Checking commit messages for Jira tag
          command: ./ci/scripts/lint_00_validate_commit_message.sh
      - run:
          name: Checking PR title for Jira tag
          command: ./ci/scripts/lint_10_validate_pr_title.sh
      - run:
          name: Checking Python lint with yapf
          command: ./ci/scripts/lint_20_yapf.sh
      - run:
          name: Checking Python lint with Pylint
          command: ./ci/scripts/lint_30_pylint.sh
      - lint_teardown

  unit_test:
    <<: *job_defaults
    steps:
      - project_setup
      - test_setup
      - run:
          name: Run unit tests
          command: ./ci/scripts/tests_unit_00_execute.sh
          no_output_timeout: 300s
          when:  always
      - test_teardown

  integration_test:
    <<: *job_defaults
    steps:
      - project_setup
      - test_setup
      # Setup GCP access and create cloud resources as needed.
      - run:
          name: Run integration tests
          command: ./ci/scripts/tests_integration_00_execute.sh
          no_output_timeout: 3000s
      - run:
          name: Delete buckets and datasets
          command: ./ci/scripts/tests_integration_99_teardown.sh
          when: on_success
      - test_teardown

workflows:
  version: 2
  test:
    jobs:
      - linting_checks
      - unit_test
      - integration_test:
          filters:
            branches:
              # This would cause too much noise to run on commit, run nightly
              # instead per below workflow.
              ignore: develop

  nightly:
    triggers:
      - schedule:
          cron: "0 6 * * *" # midnight CST
          filters:
            branches:
              only: develop
    jobs:
      - integration_test
