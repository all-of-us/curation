version: 2
jobs:
  build:
    working_directory: ~/curation
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      GOOGLE_APPLICATION_CREDENTIALS: /home/ubuntu/gcloud-credentials-key.json
      PYTHONPATH: /usr/lib/google-cloud-sdk/platform/google_appengine/:~/curation/data_steward:~/curation/data_steward/lib

    docker:
      - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
        # This command is commented out due to failure in docker image initialisation.
        # command: /sbin/init
    steps:
      # Machine Setup

      # `checkout` checks out your code to your working directory.
      - checkout
      # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
      - run: mkdir -p $CIRCLE_ARTIFACTS
      # This is based on our 1.0 configuration file or project settings
      - run:
          working_directory: ~/curation
          command: ~/curation/data_steward/init_env.sh
      - run:
          working_directory: ~/curation
          command: cat $HOME/.circlerc
      - run:
          working_directory: ~/curation
          command: echo "deb http://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s) main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      - run:
          working_directory: ~/curation
          command: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
      - run:
          working_directory: ~/curation
          command: sudo apt-get update && sudo apt-get install dpkg && sudo apt-get install google-cloud-sdk
      - run:
          working_directory: ~/curation
          command: sudo apt-get install google-cloud-sdk-app-engine-python
      - run:
          working_directory: ~/curation
          command: chmod 700 ~/curation/data_steward/ci/activate_creds.sh && chmod 700 ~/curation/data_steward/ci/setup.sh && chmod 700 ~/curation/data_steward/ci/create_bucket.sh
      - run:
          working_directory: ~/curation
          command: ~/curation/data_steward/ci/activate_creds.sh ~/gcloud-credentials-key.json
      - run:
          working_directory: ~/curation
          command: ~/curation/data_steward/ci/setup.sh
      # Dependencies
      - run:
          command: pip install --upgrade pip setuptools virtualenv
      - run:
          command: cd ~/curation/data_steward/ && pip install -t lib/ -r requirements.txt
      # Test
      #   This would typically be a build job when using workflows, possibly combined with build
      - run:
          working_directory: ~/curation
          command: t=$(git log -1 --pretty=%B) ; if [[ "$t" == *"fast tests"* ]] ; then export ALL_TESTS="False" ; else export ALL_TESTS="True" ; fi ; ~/curation/data_steward/test/run_tests.sh -g /usr/lib/google-cloud-sdk/platform/google_appengine/
          no_output_timeout: 3000s
      # Save test results
      #    - store_test_results:
      #        path: /tmp/circleci-test-results
      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
#    - store_artifacts:
#        path: /tmp/circleci-test-results
# To deploy to staging, cut a GitHub release on a green build, with tag of
#  # the form v0-1-1-rc0. We use tags as AppEngine version names, so they must
#  # follow AE rules (no dots).
#   staging:
#     tag: /v[0-9]+(-[0-9]+)*-rc[0-9]+[a-z]*/
#     commands:
#        - run: ~/ci/activate_creds.sh ~/gcloud-credentials.key
#        - run: ~/ci/release_notes.py all-of-us-rdr-staging
#        - run: ~/tools/upgrade_database.sh -i https://all-of-us-rdr-staging.appspot.com --creds_file ~/gcloud-credentials.key:
#               pwd:
#                 rest-api
#        - run: ~/ci/deploy.sh all-of-us-rdr-staging config/config_staging.json ~/gcloud-credentials.key
#        - run: ~/rest-api/test/test_server.sh -i https://all-of-us-rdr-staging.appspot.com -c ~/gcloud-credentials.key

## ~/ci/deploy.sh all-of-us-rdr-stable config/config_stable.json <configurator key file>
## ~/ci/deploy.sh all-of-us-rdr config/config_prod.json <configurator key file>
