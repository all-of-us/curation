version: 2
jobs:
  build:
    working_directory: ~/curation
    parallelism: 1
    shell: /bin/bash --login
    # CircleCI 2.0 does not support environment variables that refer to each other the same way as 1.0 did.
    # If any of these refer to each other, rewrite them so that they don't or see https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables .
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      GOOGLE_APPLICATION_CREDENTIALS: /home/ubuntu/gcloud-credentials-key.json
      PYTHONPATH: /usr/lib/google-cloud-sdk/platform/google_appengine/:~/curation/data_steward:~/curation/data_steward/lib

    docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init
    steps:
    # Machine Setup
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # The following `checkout` command checks out your code to your working directory.
    - checkout
    # Prepare for artifact and test results  collection equivalent to how it was done on 1.0.
    - run: mkdir -p $CIRCLE_ARTIFACTS
    # This is based on our 1.0 configuration file or project settings
    - run:
        working_directory: ~/curation
        command: ~/curation/data_steward/init_env.sh
    - run:
        working_directory: ~/curation
        command: cat $HOME/.circlerc
    - run:
        working_directory: ~/curation
        command: echo "deb http://packages.cloud.google.com/apt cloud-sdk-$(lsb_release -c -s) main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - run:
        working_directory: ~/curation
        command: curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    - run:
        working_directory: ~/curation
        command: sudo apt-get update && sudo apt-get install dpkg && sudo apt-get install google-cloud-sdk
    - run:
        working_directory: ~/curation
        command: sudo apt-get install google-cloud-sdk-app-engine-python
    - run:
        working_directory: ~/curation
        command: chmod 700 ~/curation/data_steward/ci/activate_creds.sh && chmod 700 ~/curation/data_steward/ci/setup.sh
    - run:
        working_directory: ~/curation
        command: ~/curation/data_steward/ci/activate_creds.sh ~/gcloud-credentials-key.json
    - run:
        working_directory: ~/curation
        command: ~/curation/data_steward/ci/setup.sh
    # Dependencies
    #   This would typically go in either a build or a build-and-test job when using workflows
    # Restore the dependency cache
#    - restore_cache:
#        keys:
#        # This branch if available
#        - v1-dep-{{ .Branch }}-
#        # Default branch if not
#        - v1-dep-develop-
#        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
#        - v1-dep-
    # This is based on our 1.0 configuration file or project settings
    - run: pip install --upgrade pip
    - run: cd ~/curation/data_steward/ && pip install -t lib/ -r requirements.txt
    # Save dependency cache
#    - save_cache:
#        key: v1-dep-{{ .Branch }}-{{ epoch }}
#        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries

    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run:
        command: ~/curation/data_steward/test/run_tests.sh -g /usr/lib/google-cloud-sdk/platform/google_appengine/
        no_output_timeout: 3000s
    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
#    - store_test_results:
#        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
#    - store_artifacts:
#        path: /tmp/circleci-test-results
# To deploy to staging, cut a GitHub release on a green build, with tag of
#  # the form v0-1-1-rc0. We use tags as AppEngine version names, so they must
#  # follow AE rules (no dots).
#   staging:
#     tag: /v[0-9]+(-[0-9]+)*-rc[0-9]+[a-z]*/
#     commands:
#        - run: ~/ci/activate_creds.sh ~/gcloud-credentials.key
#        - run: ~/ci/release_notes.py all-of-us-rdr-staging
#        - run: ~/tools/upgrade_database.sh -i https://all-of-us-rdr-staging.appspot.com --creds_file ~/gcloud-credentials.key:
#               pwd:
#                 rest-api
#        - run: ~/ci/deploy.sh all-of-us-rdr-staging config/config_staging.json ~/gcloud-credentials.key
#        - run: ~/rest-api/test/test_server.sh -i https://all-of-us-rdr-staging.appspot.com -c ~/gcloud-credentials.key

## Stable and production deployments are not done automatically but can be
## manually executed with the test.sh and deploy.sh pair, e.g.:
## ~/ci/deploy.sh all-of-us-rdr-stable config/config_stable.json <configurator key file>
## ~/ci/deploy.sh all-of-us-rdr config/config_prod.json <configurator key file>
